/*
Part of the code is generated by ChatGPT: https://chatgpt.com/


*/

#include <iostream>
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <unistd.h>
#include <cstring>
#include <arpa/inet.h>
#include <sys/socket.h>

#define SERVER_PORT 4433 // Change this to your desired server port
#define CERT_FILE "server.crt" // Server's certificate file (change as needed)
#define KEY_FILE "server.key"  // Server's private key file (change as needed)

// Function to initialize OpenSSL and create an SSL context
SSL_CTX* create_ssl_context() {
    SSL_CTX *ctx;

    // Initialize OpenSSL
    SSL_library_init();
    OpenSSL_add_ssl_algorithms();
    SSL_load_error_strings();

    // Create SSL context
    ctx = SSL_CTX_new(SSLv23_server_method());
    if (ctx == nullptr) {
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }

    // Load server certificate and key
    if (SSL_CTX_use_certificate_file(ctx, CERT_FILE, SSL_FILETYPE_PEM) <= 0) {
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }
    if (SSL_CTX_use_PrivateKey_file(ctx, KEY_FILE, SSL_FILETYPE_PEM) <= 0) {
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }

    return ctx;
}

int main() {
    SSL_CTX *ctx;
    SSL *ssl;
    int sockfd, client_fd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len;

    // Initialize SSL context
    ctx = create_ssl_context();

    // Create TCP socket
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Set up server address
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    server_addr.sin_port = htons(SERVER_PORT);

    // Bind socket to address
    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(sockfd, 5) == -1) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    std::cout << "SSL/TLS server is listening on port " << SERVER_PORT << std::endl;

    while (true) {
        // Accept client connection
        addr_len = sizeof(client_addr);
        client_fd = accept(sockfd, (struct sockaddr *)&client_addr, &addr_len);
        if (client_fd == -1) {
            perror("accept");
            continue;
        }

        // Create new SSL connection object
        ssl = SSL_new(ctx);
        SSL_set_fd(ssl, client_fd);

        // Perform SSL handshake
        if (SSL_accept(ssl) == -1) {
            ERR_print_errors_fp(stderr);
        } else {
            std::cout << "SSL/TLS handshake successful" << std::endl;
            
            // Example: Read and write data over SSL connection
            char buf[1024];
            int bytes_read = SSL_read(ssl, buf, sizeof(buf));
            if (bytes_read > 0) {
                buf[bytes_read] = '\0';
                std::cout << "Received: " << buf << std::endl;

                const char *response = "Server received your message!";
                SSL_write(ssl, response, strlen(response));
            }
        }

        // Shutdown SSL connection and close socket
        SSL_shutdown(ssl);
        close(client_fd);
        SSL_free(ssl);
    }

    // Clean up
    close(sockfd);
    SSL_CTX_free(ctx);

    return 0;
}
