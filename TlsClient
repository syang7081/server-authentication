/* Copyright (c) 2024 Shawn Yang. All rights reserved.
 * This source code is licensed under Apache 2.0 License.
*/

/* Sample client code to show how TLS custom data is added and parsed.
 * Part of code is generated by ChatGPT at https://chatgpt.com/.
 * APIs to add/parse TLS custom data is documented at
 * https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_add_client_custom_ext.html
*/

#include <iostream>
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <unistd.h>
#include <cstring>
#include <arpa/inet.h>
#include <sys/socket.h>

#define SERVER_ADDR "127.0.0.1"
#define SERVER_PORT 4433 // Change this to your server's port
#define TLS_EXT_TYPE = 11000;
 
int custom_ext_add_cb_ex(SSL *s, unsigned int ext_type,
                              unsigned int context,
                              const unsigned char **out,
                              size_t *outlen, X509 *x,
                              size_t chainidx, int *al,
                              void *add_arg) {
    //TODO: add custom data: app instance ID and nonce
    return 1;

}

void custom_ext_free_cb_ex(SSL *s, unsigned int ext_type,
                            unsigned int context,
                            const unsigned char *out,
                            void *add_arg) {

}

int custom_ext_parse_cb_ex(SSL *s, unsigned int ext_type,
                            unsigned int context,
                            const unsigned char *in,
                            size_t inlen, X509 *x,
                            size_t chainidx, int *al,
                            void *parse_arg) {
    // TODO: 
    // (1) Parse data from server: SHA256 hash of (nonce, server authentication code),
    //     signature of the hash signed by server private key
    // (2) Verify the hash and digital signature are correct
    return 1;

}


// Function to initialize OpenSSL and create an SSL context
SSL_CTX* create_ssl_context() {
    SSL_CTX *ctx;

    // Initialize OpenSSL
    SSL_library_init();
    OpenSSL_add_ssl_algorithms();
    SSL_load_error_strings();

    // Create SSL context
    ctx = SSL_CTX_new(SSLv23_client_method());
    if (ctx == nullptr) {
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }

    return ctx;
}

int main() {
    SSL_CTX *ctx;
    SSL *ssl;
    int sockfd;
    struct sockaddr_in server_addr;

    // Initialize SSL context and connection
    ctx = create_ssl_context();

    // Create a TCP socket
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Set up server address
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);
    if (inet_pton(AF_INET, SERVER_ADDR, &server_addr.sin_addr) <= 0) {
        perror("inet_pton");
        exit(EXIT_FAILURE);
    }

    // Connect to server
    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        perror("connect");
        exit(EXIT_FAILURE);
    }

    // Add custom data
    if (SSL_extension_supported(TLS_EXT_TYPE) != 0) {
        // The extension type cannot be used
        perror("Tls extension type is invalid");
        exit(EXIT_FAILURE);
    }
    int ret = SSL_CTX_add_custom_ext(ctx, TLS_EXT_TYPE,
            SSL_EXT_CLIENT_HELLO | SSL_EXT_TLS1_2_SERVER_HELLO | SSL_EXT_TLS1_3_SERVER_HELLO,
            custom_ext_add_cb_ex add_cb,
            custom_ext_free_cb_ex free_cb,
            NULL,
            custom_ext_parse_cb_ex parse_cb,
            NULL);
    //TODO: check ret value for error 

    // Create SSL connection object
    ssl = SSL_new(ctx);
    SSL_set_fd(ssl, sockfd);

    // Perform SSL handshake
    if (SSL_connect(ssl) == -1) {
        ERR_print_errors_fp(stderr);
    } else {
        std::cout << "SSL/TLS handshake successful" << std::endl;
        // Send and receive data over SSL connection (example)
        const char *msg = "Hello, server!";
        SSL_write(ssl, msg, strlen(msg));

        char buf[1024];
        int bytes_read = SSL_read(ssl, buf, sizeof(buf));
        if (bytes_read > 0) {
            buf[bytes_read] = '\0';
            std::cout << "Received: " << buf << std::endl;
        }
    }

    // Clean up
    SSL_shutdown(ssl);
    close(sockfd);
    SSL_free(ssl);
    SSL_CTX_free(ctx);

    return 0;
}
